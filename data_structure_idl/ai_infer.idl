// ai.idl — Scheme B (announce → claim → grant → assigned TaskList)
// - Worker 主动认领（Claim），Patcher 公告胜者（Grant）
// - Patcher 直接发布带 assigned_worker_id 的 TaskList
// - Worker 通过 worker_id 过滤（CFT 或应用层判断）
// - 结果直传 Bytes，服务端去重，客户端仅按 TTL 等待

module data_structure {

  // ---------- Common ----------
  struct Bytes {
    sequence<octet> value;
  };

  // ---------- Client → Patcher ----------
  struct SingleTask {
    string request_id;    // 全局请求ID
    string task_id;       // 请求内唯一条目ID
    string model_id;      // 目标模型
    string client_id;     // 回传路由
    Bytes  payload;       // 输入字节
  };

  struct InferenceRequest {
    string request_id;
    sequence<SingleTask> tasks;  // 客户端一次提交的任务集合
  };

  // ---------- Patcher 批内载体（轻量） ----------
  struct Task {
    string request_id;
    string task_id;
    string client_id;
    Bytes  payload;
  };

  // ---------- Announce / Claim / Grant ----------
  // Patcher 公告：有批可领（仅元信息，不含 payload）
  struct OpenBatch {
    string batch_id;       // "b-<ts>-<seq>"
    string model_id;
    long   size;           // 批内任务条数
    long   create_ts_ms;   // 批创建时间戳
  };

  // Worker 竞争认领
  struct Claim {
    string batch_id;
    string worker_id;      // 申领者
    long   queue_length;         
  };

  // Patcher 宣告胜者（仅一人胜出）
  struct Grant {
    string batch_id;
    string winner_worker_id;
  };

  // ---------- Patcher → Worker（指派后的独占批） ----------
  struct TaskList {
    string batch_id;
    string model_id;
    string assigned_worker_id; // 仅该 worker 消费
    sequence<Task> tasks;
  };

  // ---------- Worker → Spliter ----------
  struct WorkerTaskResult {
    string request_id;
    string task_id;
    string client_id;      // 透传回 Spliter 用于路由
    string status;         // "OK" | "ERROR_*"
    Bytes  output_blob;    // 结果字节
    sequence<string> texts; 

  };

  struct WorkerResult {
    string batch_id;
    string model_id;
    string worker_id;      // 实际处理该批的 worker
    sequence<WorkerTaskResult> results;
  };

  // ---------- Spliter → Client（纯流式增量；服务端去重） ----------
  struct ResultItem {
    string task_id;        
    string status;
    Bytes  output_blob;
  };

  struct ResultUpdate {
    string request_id;
    string client_id;      // 路由到目标客户端
    sequence<ResultItem> items;   // 本次新增/到达的结果条目
  };
};
