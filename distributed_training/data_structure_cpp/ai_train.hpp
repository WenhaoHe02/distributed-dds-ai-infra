// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file ai_train.hpp
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen (version: 4.1.0).
 */

#ifndef FAST_DDS_GENERATED__AI_TRAIN_AI_TRAIN_HPP
#define FAST_DDS_GENERATED__AI_TRAIN_AI_TRAIN_HPP

#include <cstdint>
#include <utility>
#include <vector>


#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(AI_TRAIN_SOURCE)
#define AI_TRAIN_DllAPI __declspec( dllexport )
#else
#define AI_TRAIN_DllAPI __declspec( dllimport )
#endif // AI_TRAIN_SOURCE
#else
#define AI_TRAIN_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define AI_TRAIN_DllAPI
#endif // _WIN32

namespace ai_train {

typedef uint32_t RoundId;

typedef uint32_t ClientId;

typedef std::vector<uint8_t> Bytes;

/*!
 * @brief This class represents the structure TrainCmd defined by the user in the IDL file.
 * @ingroup ai_train
 */
class TrainCmd
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport TrainCmd()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~TrainCmd()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object TrainCmd that will be copied.
     */
    eProsima_user_DllExport TrainCmd(
            const TrainCmd& x)
    {
                    m_round_id = x.m_round_id;

                    m_subset_size = x.m_subset_size;

                    m_epochs = x.m_epochs;

                    m_lr = x.m_lr;

                    m_seed = x.m_seed;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object TrainCmd that will be copied.
     */
    eProsima_user_DllExport TrainCmd(
            TrainCmd&& x) noexcept
    {
        m_round_id = x.m_round_id;
        m_subset_size = x.m_subset_size;
        m_epochs = x.m_epochs;
        m_lr = x.m_lr;
        m_seed = x.m_seed;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object TrainCmd that will be copied.
     */
    eProsima_user_DllExport TrainCmd& operator =(
            const TrainCmd& x)
    {

                    m_round_id = x.m_round_id;

                    m_subset_size = x.m_subset_size;

                    m_epochs = x.m_epochs;

                    m_lr = x.m_lr;

                    m_seed = x.m_seed;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object TrainCmd that will be copied.
     */
    eProsima_user_DllExport TrainCmd& operator =(
            TrainCmd&& x) noexcept
    {

        m_round_id = x.m_round_id;
        m_subset_size = x.m_subset_size;
        m_epochs = x.m_epochs;
        m_lr = x.m_lr;
        m_seed = x.m_seed;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x TrainCmd object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const TrainCmd& x) const
    {
        return (m_round_id == x.m_round_id &&
           m_subset_size == x.m_subset_size &&
           m_epochs == x.m_epochs &&
           m_lr == x.m_lr &&
           m_seed == x.m_seed);
    }

    /*!
     * @brief Comparison operator.
     * @param x TrainCmd object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const TrainCmd& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets a value in member round_id
     * @param _round_id New value for member round_id
     */
    eProsima_user_DllExport void round_id(
            RoundId _round_id)
    {
        m_round_id = _round_id;
    }

    /*!
     * @brief This function returns the value of member round_id
     * @return Value of member round_id
     */
    eProsima_user_DllExport RoundId round_id() const
    {
        return m_round_id;
    }

    /*!
     * @brief This function returns a reference to member round_id
     * @return Reference to member round_id
     */
    eProsima_user_DllExport RoundId& round_id()
    {
        return m_round_id;
    }


    /*!
     * @brief This function sets a value in member subset_size
     * @param _subset_size New value for member subset_size
     */
    eProsima_user_DllExport void subset_size(
            uint32_t _subset_size)
    {
        m_subset_size = _subset_size;
    }

    /*!
     * @brief This function returns the value of member subset_size
     * @return Value of member subset_size
     */
    eProsima_user_DllExport uint32_t subset_size() const
    {
        return m_subset_size;
    }

    /*!
     * @brief This function returns a reference to member subset_size
     * @return Reference to member subset_size
     */
    eProsima_user_DllExport uint32_t& subset_size()
    {
        return m_subset_size;
    }


    /*!
     * @brief This function sets a value in member epochs
     * @param _epochs New value for member epochs
     */
    eProsima_user_DllExport void epochs(
            uint32_t _epochs)
    {
        m_epochs = _epochs;
    }

    /*!
     * @brief This function returns the value of member epochs
     * @return Value of member epochs
     */
    eProsima_user_DllExport uint32_t epochs() const
    {
        return m_epochs;
    }

    /*!
     * @brief This function returns a reference to member epochs
     * @return Reference to member epochs
     */
    eProsima_user_DllExport uint32_t& epochs()
    {
        return m_epochs;
    }


    /*!
     * @brief This function sets a value in member lr
     * @param _lr New value for member lr
     */
    eProsima_user_DllExport void lr(
            double _lr)
    {
        m_lr = _lr;
    }

    /*!
     * @brief This function returns the value of member lr
     * @return Value of member lr
     */
    eProsima_user_DllExport double lr() const
    {
        return m_lr;
    }

    /*!
     * @brief This function returns a reference to member lr
     * @return Reference to member lr
     */
    eProsima_user_DllExport double& lr()
    {
        return m_lr;
    }


    /*!
     * @brief This function sets a value in member seed
     * @param _seed New value for member seed
     */
    eProsima_user_DllExport void seed(
            uint32_t _seed)
    {
        m_seed = _seed;
    }

    /*!
     * @brief This function returns the value of member seed
     * @return Value of member seed
     */
    eProsima_user_DllExport uint32_t seed() const
    {
        return m_seed;
    }

    /*!
     * @brief This function returns a reference to member seed
     * @return Reference to member seed
     */
    eProsima_user_DllExport uint32_t& seed()
    {
        return m_seed;
    }



private:

    RoundId m_round_id{0};
    uint32_t m_subset_size{0};
    uint32_t m_epochs{0};
    double m_lr{0.0};
    uint32_t m_seed{0};

};
/*!
 * @brief This class represents the structure ClientUpdate defined by the user in the IDL file.
 * @ingroup ai_train
 */
class ClientUpdate
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport ClientUpdate()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~ClientUpdate()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object ClientUpdate that will be copied.
     */
    eProsima_user_DllExport ClientUpdate(
            const ClientUpdate& x)
    {
                    m_client_id = x.m_client_id;

                    m_round_id = x.m_round_id;

                    m_num_samples = x.m_num_samples;

                    m_data = x.m_data;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object ClientUpdate that will be copied.
     */
    eProsima_user_DllExport ClientUpdate(
            ClientUpdate&& x) noexcept
    {
        m_client_id = x.m_client_id;
        m_round_id = x.m_round_id;
        m_num_samples = x.m_num_samples;
        m_data = std::move(x.m_data);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object ClientUpdate that will be copied.
     */
    eProsima_user_DllExport ClientUpdate& operator =(
            const ClientUpdate& x)
    {

                    m_client_id = x.m_client_id;

                    m_round_id = x.m_round_id;

                    m_num_samples = x.m_num_samples;

                    m_data = x.m_data;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object ClientUpdate that will be copied.
     */
    eProsima_user_DllExport ClientUpdate& operator =(
            ClientUpdate&& x) noexcept
    {

        m_client_id = x.m_client_id;
        m_round_id = x.m_round_id;
        m_num_samples = x.m_num_samples;
        m_data = std::move(x.m_data);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x ClientUpdate object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const ClientUpdate& x) const
    {
        return (m_client_id == x.m_client_id &&
           m_round_id == x.m_round_id &&
           m_num_samples == x.m_num_samples &&
           m_data == x.m_data);
    }

    /*!
     * @brief Comparison operator.
     * @param x ClientUpdate object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const ClientUpdate& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets a value in member client_id
     * @param _client_id New value for member client_id
     */
    eProsima_user_DllExport void client_id(
            ClientId _client_id)
    {
        m_client_id = _client_id;
    }

    /*!
     * @brief This function returns the value of member client_id
     * @return Value of member client_id
     */
    eProsima_user_DllExport ClientId client_id() const
    {
        return m_client_id;
    }

    /*!
     * @brief This function returns a reference to member client_id
     * @return Reference to member client_id
     */
    eProsima_user_DllExport ClientId& client_id()
    {
        return m_client_id;
    }


    /*!
     * @brief This function sets a value in member round_id
     * @param _round_id New value for member round_id
     */
    eProsima_user_DllExport void round_id(
            RoundId _round_id)
    {
        m_round_id = _round_id;
    }

    /*!
     * @brief This function returns the value of member round_id
     * @return Value of member round_id
     */
    eProsima_user_DllExport RoundId round_id() const
    {
        return m_round_id;
    }

    /*!
     * @brief This function returns a reference to member round_id
     * @return Reference to member round_id
     */
    eProsima_user_DllExport RoundId& round_id()
    {
        return m_round_id;
    }


    /*!
     * @brief This function sets a value in member num_samples
     * @param _num_samples New value for member num_samples
     */
    eProsima_user_DllExport void num_samples(
            uint64_t _num_samples)
    {
        m_num_samples = _num_samples;
    }

    /*!
     * @brief This function returns the value of member num_samples
     * @return Value of member num_samples
     */
    eProsima_user_DllExport uint64_t num_samples() const
    {
        return m_num_samples;
    }

    /*!
     * @brief This function returns a reference to member num_samples
     * @return Reference to member num_samples
     */
    eProsima_user_DllExport uint64_t& num_samples()
    {
        return m_num_samples;
    }


    /*!
     * @brief This function copies the value in member data
     * @param _data New value to be copied in member data
     */
    eProsima_user_DllExport void data(
            const Bytes& _data)
    {
        m_data = _data;
    }

    /*!
     * @brief This function moves the value in member data
     * @param _data New value to be moved in member data
     */
    eProsima_user_DllExport void data(
            Bytes&& _data)
    {
        m_data = std::move(_data);
    }

    /*!
     * @brief This function returns a constant reference to member data
     * @return Constant reference to member data
     */
    eProsima_user_DllExport const Bytes& data() const
    {
        return m_data;
    }

    /*!
     * @brief This function returns a reference to member data
     * @return Reference to member data
     */
    eProsima_user_DllExport Bytes& data()
    {
        return m_data;
    }



private:

    ClientId m_client_id{0};
    RoundId m_round_id{0};
    uint64_t m_num_samples{0};
    Bytes m_data;

};
/*!
 * @brief This class represents the structure ModelBlob defined by the user in the IDL file.
 * @ingroup ai_train
 */
class ModelBlob
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport ModelBlob()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~ModelBlob()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object ModelBlob that will be copied.
     */
    eProsima_user_DllExport ModelBlob(
            const ModelBlob& x)
    {
                    m_round_id = x.m_round_id;

                    m_data = x.m_data;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object ModelBlob that will be copied.
     */
    eProsima_user_DllExport ModelBlob(
            ModelBlob&& x) noexcept
    {
        m_round_id = x.m_round_id;
        m_data = std::move(x.m_data);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object ModelBlob that will be copied.
     */
    eProsima_user_DllExport ModelBlob& operator =(
            const ModelBlob& x)
    {

                    m_round_id = x.m_round_id;

                    m_data = x.m_data;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object ModelBlob that will be copied.
     */
    eProsima_user_DllExport ModelBlob& operator =(
            ModelBlob&& x) noexcept
    {

        m_round_id = x.m_round_id;
        m_data = std::move(x.m_data);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x ModelBlob object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const ModelBlob& x) const
    {
        return (m_round_id == x.m_round_id &&
           m_data == x.m_data);
    }

    /*!
     * @brief Comparison operator.
     * @param x ModelBlob object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const ModelBlob& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets a value in member round_id
     * @param _round_id New value for member round_id
     */
    eProsima_user_DllExport void round_id(
            RoundId _round_id)
    {
        m_round_id = _round_id;
    }

    /*!
     * @brief This function returns the value of member round_id
     * @return Value of member round_id
     */
    eProsima_user_DllExport RoundId round_id() const
    {
        return m_round_id;
    }

    /*!
     * @brief This function returns a reference to member round_id
     * @return Reference to member round_id
     */
    eProsima_user_DllExport RoundId& round_id()
    {
        return m_round_id;
    }


    /*!
     * @brief This function copies the value in member data
     * @param _data New value to be copied in member data
     */
    eProsima_user_DllExport void data(
            const Bytes& _data)
    {
        m_data = _data;
    }

    /*!
     * @brief This function moves the value in member data
     * @param _data New value to be moved in member data
     */
    eProsima_user_DllExport void data(
            Bytes&& _data)
    {
        m_data = std::move(_data);
    }

    /*!
     * @brief This function returns a constant reference to member data
     * @return Constant reference to member data
     */
    eProsima_user_DllExport const Bytes& data() const
    {
        return m_data;
    }

    /*!
     * @brief This function returns a reference to member data
     * @return Reference to member data
     */
    eProsima_user_DllExport Bytes& data()
    {
        return m_data;
    }



private:

    RoundId m_round_id{0};
    Bytes m_data;

};

} // namespace ai_train

#endif // _FAST_DDS_GENERATED_AI_TRAIN_AI_TRAIN_HPP_


